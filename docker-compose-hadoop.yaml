services:
  namenode:
    build:
      context: .
      dockerfile: Dockerfile.hadoop
    environment:
      - CORE_CONF_fs_defaultFS=hdfs://namenode:9000
    volumes:
      - namenode-data:/usr/local/hadoop/hadoopdata/hdfs/namenode
    ports:
      - "50070:50070" # NameNode Web UI
    networks:
      - hadoop
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:50070"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  secondarynamenode:
    build:
      context: .
      dockerfile: Dockerfile.hadoop
    environment:
      - CORE_CONF_fs_defaultFS=hdfs://namenode:9000
    volumes:
      - secondarynamenode-data:/usr/local/hadoop/hadoopdata/hdfs/secondarynamenode
    ports:
      - "50090:50090" # Secondary NameNode Web UI
    networks:
      - hadoop
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:50090"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  datanode:
    build:
      context: .
      dockerfile: Dockerfile.hadoop
    environment:
      - CORE_CONF_fs_defaultFS=hdfs://namenode:9000
    volumes:
      - datanode-data:/usr/local/hadoop/hadoopdata/hdfs/datanode
    networks:
      - hadoop
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:9864"] # DataNode Web UI
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  resourcemanager:
    build:
      context: .
      dockerfile: Dockerfile.hadoop
    environment:
      - CORE_CONF_fs_defaultFS=hdfs://namenode:9000
    ports:
      - "8088:8088" # ResourceManager Web UI
    networks:
      - hadoop
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8088/ws/v1/cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  nodemanager:
    build:
      context: .
      dockerfile: Dockerfile.hadoop
    environment:
      - CORE_CONF_fs_defaultFS=hdfs://namenode:9000
    networks:
      - hadoop
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8042/ws/v1/node/health"] # NodeManager Web UI
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  hbase:
    build:
      context: .
      dockerfile: Dockerfile.hbase
    environment:
      - HBASE_CONF_hbase_rootdir=hdfs://namenode:9000/hbase
    ports:
      - "16010:16010" # HBase Master Web UI
    networks:
      - hadoop
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:16010/jmx"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  spark-master:
    build:
      context: .
      dockerfile: Dockerfile.spark
    environment:
      - SPARK_MODE=master
      - SPARK_MASTER_WEBUI_PORT=8081
      - SPARK_MASTER_PORT=7077
    ports:
      - "8081:8081" # Spark Master Web UI
      - "7077:7077" # Spark Master Port
    networks:
      - hadoop
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8081"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  spark-worker:
    build:
      context: .
      dockerfile: Dockerfile.spark
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER=spark://spark-master:7077
      - SPARK_WORKER_WEBUI_PORT=8082
    ports:
      - "8082:8082" # Spark Worker Web UI
    networks:
      - hadoop
    depends_on:
      - spark-master
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8082"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

networks:
  default:
    name: bunjang_data_pipeline_project_default
    external: true
  hadoop:
    driver: bridge

volumes:
  namenode-data:
  secondarynamenode-data:
  datanode-data:
